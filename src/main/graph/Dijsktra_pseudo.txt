Input link data file, and O-D pair with o1 and d1

Create graph: HashMap<String, List<Pair<String, Double>>> graph
Read link data {origin, destination, distance} into the graph
Create distMap: HashMap<String, Double> distMap //result storing the distance between o1 and all nodes
Creat heap: PriorityQueue<Pair<String, Pair<String, Double>>> heap, <Pair<currV, Pair<parentV, dist>>>
Create parentMap: HashMap<String, String> parentMap // result storing the parent vertex for the path for the current vertex

heap.offer(Pair(o1, Pair(null, 0.0)));
while (!heap.isempty && !disMap.contains(d1)) {
    pair = heap.poll();
    curr = pair.get(0);
    parent = pair.get(1).get(0);
    cummDist = curr.pair.get(1).get(1);
    adjs = graph.get(o1);
    if (!distMap.cointains(curr)) {
        distMap.put(curr, cummDist);
        parentMap.put(curr, parent);
        for (adj : adjs) {
            heap.offer(Pair(adj.get(0), Pair(curr, cummDist + adj.get(1)))
        }
    }
    

}

total distance = distMap.get(d1)

//get path array

List<String> getPath(String d1) {
    list = new list();
    helper(d1, list);
    return list;
}

void helper(String curr, list) {
    if (parentMap.get(curr) != null) {
        helper(parentMap.get(curr), list)
    }
    list.add(curr);
}

